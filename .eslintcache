[{"D:\\GitHub\\todoapp\\my-app\\src\\components\\Main\\Main.tsx":"1","D:\\GitHub\\todoapp\\my-app\\src\\components\\ToDoCard\\ToDoCard.tsx":"2","D:\\GitHub\\todoapp\\my-app\\src\\reportWebVitals.ts":"3","D:\\GitHub\\todoapp\\my-app\\src\\index.tsx":"4","D:\\GitHub\\todoapp\\my-app\\src\\components\\Footer\\Footer.tsx":"5","D:\\GitHub\\todoapp\\my-app\\src\\App.tsx":"6","D:\\GitHub\\todoapp\\my-app\\src\\components\\Cards\\Cards.tsx":"7","D:\\GitHub\\todoapp\\my-app\\src\\components\\Cards\\DoneCards.tsx":"8"},{"size":2271,"mtime":1606442744690,"results":"9","hashOfConfig":"10"},{"size":913,"mtime":1606440791879,"results":"11","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":555,"mtime":1606148299074,"results":"13","hashOfConfig":"10"},{"size":1294,"mtime":1606149242289,"results":"14","hashOfConfig":"10"},{"size":326,"mtime":1606149515446,"results":"15","hashOfConfig":"10"},{"size":573,"mtime":1606441726084,"results":"16","hashOfConfig":"10"},{"size":525,"mtime":1606442032242,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"2ec0pd",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"D:\\GitHub\\todoapp\\my-app\\src\\components\\Main\\Main.tsx",["36"],"import React, { Component } from \"react\";\r\nimport { ToDoCard } from \"../ToDoCard/ToDoCard\";\r\nimport { Cards } from \"../Cards/Cards\";\r\n\r\nimport \"./Main.css\";\r\nimport { DoneCards } from \"../Cards/DoneCards\";\r\n\r\nexport class Main extends Component<any, {}> {\r\n  state = {\r\n    tasks: [],\r\n    doneTasks: [],\r\n    inputValue: \"\",\r\n    index: 0,\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this); \r\n    this.AddTask = this.AddTask.bind(this);\r\n    this.updateData = this.updateData.bind(this);\r\n  }\r\n \r\n  async updateData(value: number) {\r\n    await this.setState({ index: value });\r\n    this.setState({\r\n      doneTasks: [...this.state.doneTasks, this.state.tasks[this.state.index]],\r\n    }); \r\n    this.state.tasks.splice(this.state.index, 1);\r\n    this.forceUpdate();     \r\n }\r\n\r\n  handleChange(e: any) {\r\n    this.setState({\r\n      inputValue: e.target.value,\r\n    });\r\n  }\r\n\r\n  async AddTask() {\r\n    if (this.state.inputValue !== \"\") {\r\n    await this.setState({\r\n      tasks: [...this.state.tasks, this.state.inputValue],\r\n    });\r\n  }\r\n\r\n    this.setState({\r\n      inputValue: \"\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"main__tasks\">\r\n          <div className=\"main__todo\">\r\n            Tasks to do:\r\n            <Cards text={this.state.tasks} updateData={this.updateData}/>\r\n            <form>\r\n              <div className=\"input-field col s6\">\r\n                <input\r\n                  placeholder=\"Task to do\"\r\n                  id=\"addTask\"\r\n                  type=\"text\"\r\n                  className=\"validate\"\r\n                  value={this.state.inputValue} \r\n                  onChange={this.handleChange}\r\n                /> <br/>\r\n                <input\r\n                  type=\"button\"\r\n                  value={\"Add new task\"}\r\n                  className=\"waves-effect waves-light btn #b39ddb deep-purple lighten-3\"\r\n                  onClick={this.AddTask}\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"main__finished\">\r\n            Completed tasks:\r\n            <DoneCards text={this.state.doneTasks}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n} \r\n","D:\\GitHub\\todoapp\\my-app\\src\\components\\ToDoCard\\ToDoCard.tsx",["37"],"D:\\GitHub\\todoapp\\my-app\\src\\reportWebVitals.ts",[],"D:\\GitHub\\todoapp\\my-app\\src\\index.tsx",[],"D:\\GitHub\\todoapp\\my-app\\src\\components\\Footer\\Footer.tsx",[],"D:\\GitHub\\todoapp\\my-app\\src\\App.tsx",[],"D:\\GitHub\\todoapp\\my-app\\src\\components\\Cards\\Cards.tsx",["38"],"D:\\GitHub\\todoapp\\my-app\\src\\components\\Cards\\DoneCards.tsx",["39"],"import React from \"react\";\r\nimport { ToDoCard } from \"../ToDoCard/ToDoCard\";\r\n\r\nexport class DoneCards extends React.Component<any, {}> {\r\n  constructor(props: any) {\r\n    super(props);\r\n}\r\n\r\nrender() { \r\n    let cards = []; \r\n    if (this.props.text === undefined) {\r\n      cards = [];\r\n    } else {      \r\n      for (let i = 0; i < this.props.text.length; i++) { \r\n        cards.push(<ToDoCard key={i} text={this.props.text[i]} index={i} updateData={this.props.updateData}/>);\r\n      }\r\n    }\r\n\r\n    return cards;\r\n  }\r\n}\r\n",{"ruleId":"40","severity":1,"message":"41","line":2,"column":10,"nodeType":"42","messageId":"43","endLine":2,"endColumn":18},{"ruleId":"44","severity":1,"message":"45","line":33,"column":15,"nodeType":"46","endLine":33,"endColumn":45},{"ruleId":"47","severity":1,"message":"48","line":8,"column":3,"nodeType":"49","messageId":"50","endLine":11,"endColumn":4},{"ruleId":"47","severity":1,"message":"48","line":5,"column":3,"nodeType":"49","messageId":"50","endLine":7,"endColumn":2},"@typescript-eslint/no-unused-vars","'ToDoCard' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]